
var wrapper = function () {
  "use strict";
  var supportsBase = function (I, base) {
    var result = false;
    try {
      var x = I.parseInt("10", base);
      result = I.toString(x, 10) === base.toString(10);
    } catch (e) {
      console.log(e);
    }
    return result;
  };
  var supportsBaseToString = function (I, base) {
    var result = false;
    try {
      var s = base.toString(10);
      var x = I.parseInt(s, 10);
      result = I.toString(x, base) === "10";
    } catch (e) {
      console.log(e);
    }
    return result;
  };
  (function () {
    var input10 = undefined;
    var input16 = undefined;
    var a = undefined;
    var b = undefined;
    var as = undefined;
    var supportsHex = undefined;
    var ok = undefined;
    var create10IsOk = undefined;
    var create16IsOk = undefined;
    var addIsOk = undefined;
    var multiplyIsOk = undefined;
    var multiplyJumboIsOk = undefined;
    var divideIsOk = undefined;
    var remainderIsOk = undefined;
    var initialize = function () {
      var input10 = "012345678901234567890123456789012345678901234567890";
      var input16 = "01234567890abcdef01234567890abcdef01234567890abcdef";
      var a = I.parseInt(input10, 10);
      var b = I.parseInt("213509123601923760129376102397651203958123402314875", 10);
      var aj = I.parseInt("a6c68e9f3e145d20e2aeb2239873fd808c05417db961329cb7aa81b503306118ea81f937b3f9f2d70d562de9603988d0c6ae2c8313743a72b208097448192c2328e07e13b5f471bfb06c7054d68d3d699d6ef96a8ee70349c3752d2466fa6331dabc51cd6f63b7e7b99a9b1570953881f5165e016260ad80bcb1eb7a94300ef1c76db11ae22975f84d711ecfab241a0893703d0e3e2e04e39dea90ddef9f5513871be708629080f55c290f0645bf74af791e41a0eb867cb5881819d9d3e6dd731f945fc18a0fbf0d6c6a33c17da346246bc0cbad3347a5d2201c10030f46c48dddd4c73ea68bfb0bbc2eca32459b511bbd64bd480735d172682154903ccc071b76aff70d77eac9cb66b0144e74edd95676c3ca71888c4efbe9517b786528a63c386a1f9abf921c0013555f5ba9731887e78b47de430cc2e4a68a8c73283f7081cde2e27964f134db720ca3b93ae112ab6b78380ac33c6fe0ce0f5a21aa2c90b269394e09d3293ed26e56ded676b2f475ca27443b2dfb8fe5d08b3b0e125bb348a7f32a2419336f1e406135081d926b6b8221a2affbf24e58b5f181ff8d45fa978bcddbfb38ad8457d5b1ea2225e00ce343ff9d6befbbfeac7d3a9274e12db2ab8752921886ec54d0bf8c92cc811571602cfda130279381f0d72fc30797aa850e319e38e6ff5ced13d6a2644e0a59aaa4408408e94e676895c0e4b552a2d8e06813f7702d3b0665c589d1d56a6442d5b64b38f528e123f5877694adc1460acd2a970cba750bb3f833f9ebd4e7acc414cc30791bcd249449986263200bf3e617a5870fd8ec633748fa0eb2d227998387b711cca494217c38f52ee695f01cb3aabac6eae38d763944c49fd223a44972c0f5d1a44e6a8ddc7b6cc3f56c26ac4344c64597e8c7e68e93f5f47c82c4c0831ad014581145d757ad0bc5fab9e3e6d99bed96bd7c9a1439ae82c2d016ece10a2d3d610806c3001ad67827e7c76ad88850e8555fd5cc0098786ff50aa1bd79cce68399ab8a0311c20226c73be47139b192af30176f05ed69311ab000715b2d7b62b9fcf19f0c40459c7ba7963768aaf3011a", 16);
      var bj = I.parseInt("28843693352959772c9b7414326d3d7c3ebc11604d0815c80806c8f3d6e88730f9141b3f0b086d5666f89d1475f550910470ced794250a61233b07da08c9e4358a57faf9bcd7d5be9428d1746c27563f84b2fa3a21208c2c2ecff08da8dfab4f092c96c17afdca65a1b0831af71c0dfc7bc7401be8aaecbe638b22cf4bc5f34d21cd6f4b4e793b6b56780db2a75ca870dad345c5a4515e30efbf84ab5aa8efdc301898008da373a14a8a558a35263eb21b38b78baed0492e8914106c64c7e9bab3c3f914048f0e3cd4fd9c4c4ba8a4f39f3bd0e2f5e21c99f02097d13e7561e70028d005fb4cdebe27674227d7a461fe1a422909595c45a20eeaf704dba5acb391343be3a890413b04ff7927ba8bf08381f5b7a8be403591e8d3c7f621227478c37dc26c6a020581e2995ad848b4866475f0dff698a8bd36ef73702075ead35074b6993f73d9878f959ef2fea05ded5580b263685d3ec4346a63544f8ffd82fb2a83b0c24510c1f1f8583edd7d8c982a6bf25b85859ce9c83cd7a372ce4a022d9423a6bb04bcf10aad9d311ba8ad3d9df4fbcd7a345e492ed591b3367d7e10d79d5718e3b9db4f2e628621cf32d4a22b7b13b294ca26a830301410f9eabf1612e7634fbf09b753523a258616a087ffdbf3477f25ca809b2aac51ccc0d4cdedd28ea93ac0352f16ac42c1eef36cd518105401529566f08aa8978e1aea0ff3ed5808c10426f59635fc262b05832dfff27b2613fc6bcfa096403e61840fd19eb7f96625eb06f04795831c1b9b4ead57c8b73acdbb867bc6dfd7e9ff17c7759985d777f380bbbd0fe83f9a3129463f9c0671801ed1375e5ffd70430c3879a2b58e4e1ea049665c7e87021c44d88ff59a9f6dd06e75f8e944c556ec2ec1ce30e7c52b072756f7f0edb5d641ca3ed063f22e2eb68edd877d7ae0729cee7ab782c2121eaa9e6c729e811a8c60ebaf114b5400117b9c73446a719625935456e1bd49290d35eabdc183f9d6f93375bc0d14c8523edb54b8130ed37bcdaf704e3742c4265fe9b316b3e434a86d5edf31db4584433acf39fb8c142fdb0f5cbc4eafc06d1ebc", 16);
      var xj = I.multiply(aj, bj);
      var s = I.toString(xj, 10);
      var multiplyJumboIsOk = s === "117454809549624430004494651978426617621434987718572361661335935763787954733598939308239857145127474116617245877754157985971141612185331159154605734411206565997672412796422737065360164800061973420159243956632208360960973672807806904318805878225350251686781799014009007650081273916392636621587911864999185789592844635958427693789633336771217846591669612008053865323231485600611090851348242120397980942771109462670787900817093164761517829336709772860418162737491137480419897724658380590859972870960476501911355923469435438722131130519000899591889058660790186928616660112194209792073849844262201840204411844910116646677231585470912463725983510695634092127111364449062374868837221590217359586662946880682957003743660031831148537753348842010666195619993017301312576336949358355646392619765493850814805823580618865830442195351807843260009883998027628275500426158494201209750926295190903009477856196853048300037650233376073741870903271620867622693632183571937626550031489821297962436808038743231708164413018696160840051144182175795743434177158138848552825403071099784983867887467719204894137446964925086182516045454885636389280337701224450490730393031881328041459694706930041324198751420671545445998076219283795976062937980115241914154957675992401137559954292494011713396456443180692829277001403306892526917226394450898299971590283289364800668731284170337452166661848912272503794718835460099149486236933692305460707213070865402950397642089944690321054293695888879076231934718834596267746393326656632413323777512056796269719460060097592343243523280991072031953939408977796185170382933617476175348554759322340288257321824910633117876932159734255890811526509908184380741648610113736080209046931920486672147191731107623223962718580965936441557856451807173038533723880136308880221318021852655694345415818383944054930628936659415147918744840190042130920977771510342967552531716246004901845337680476141677647555113542714128210890434453227219990026189541761619509909572238074842893896683154919184678582678719265491058909500143090457988467208327022413815718927244543971987077121573289559042902684626425083034323377850610312134659960642712312552694777492911387794546940307944686356536513641000392617509277864015394428740167838748242550853176729343694338991537444723606553101198322998810953470545978396697725420145298996028615477109511900385930679163216060247747341842012464869033936906863598932307840328344396840036418101610183303881446395297481815598255233505059652300524437860034750673854986204473659809737413443639013440859888510816228591117892897335847992509371450438191963454147760398333368503527708945375139282519410906370858410990710331560583036362190818130086839713744700789838055418054938128901905475108668612956945755404798120412522391393327005180794949291096652758742577299908270489132898693468733369812958621184149076420877864056503264289086304540282888703902833301513843671364027066950274675653633743156323234933596379369148050728186586418172596972255031006001469237254782364496900865741196423425443885515402539447890683489567257664162894026121546827420123406696039436421753232287609607933054827917666994931439091980913289452874791391555159378078687317889439848780947596337968074634245014916342323305576933391563355052189248775417638283590225502101695035736532272637827715914032913400085630186503427612019375067218888338143586747719196503032827196194789918090180041768884515936841524507597877345035422985361555112221132003212116588576134290439906120512443007480104026126934927186954047002827474704202273117333616898275686582117825949595103525461900139693854897638030988391644219523711157585937315554715962609300529967002243155023838654121196530582394830137575965423748035462344981670204659030921922992920";
      var aa = I.multiply(a, a);
      var t = I.parseInt("3735928559", 10);
      var as = I.add(aa, t);
      var supportsHex = false;
      try {
        var x = I.parseInt("10", 16);
        supportsHex = I.toString(x, 10) === (16).toString(10);
      } catch (e) {
        console.log(e);
      }
      var x0 = I.parseInt(input10, 10);
      var ok = "0" + I.toString(x0, 10) === input10;
      var create10IsOk = ok;
      var tmp0 = I.parseInt(input16, 16);
      var create16IsOk = supportsHex && "0" + I.toString(tmp0, 16).toLowerCase() === input16;
      var tmp1 = I.add(a, b);
      var addIsOk = ok && I.toString(tmp1, 10) === "225854802503158328019499559186663549637024636882765";
      var tmp2 = I.multiply(a, b);
      var multiplyIsOk = ok && I.toString(tmp2, 10) === "2635915082473353673085235184843445396749745111229911595609669061939318527195756503500792996344363750";
      var tmp3 = I.divide(as, b);
      var divideIsOk = ok && I.toString(tmp3, 10) === "713860770730150993024342853794918979066195767402";
      var tmp4 = I.remainder(as, b);
      var remainderIsOk = ok && I.toString(tmp4, 10) === "149922972578668446272207027928631904526544890275909";
    };
    benchmarkSuite.add("create-10", function () {
      if (!create10IsOk) {
        throw new Error();
      }
      return I.parseInt(input10, 10);
    }, { setup: initialize });
    benchmarkSuite.add("create-hex", function () {
      if (!create16IsOk) {
        throw new Error();
      }
      return I.parseInt(input16, 16);
    }, { setup: initialize });
    benchmarkSuite.add("toString-10", function () {
      if (!create10IsOk) {
        throw new Error();
      }
      return I.toString(a, 10);
    }, { setup: initialize });
    benchmarkSuite.add("toString-hex", function () {
      if (!create16IsOk) {
        throw new Error();
      }
      return I.toString(a, 16);
    }, { setup: initialize });
    benchmarkSuite.add("add", function () {
      if (!addIsOk) {
        throw new Error();
      }
      return I.add(a, b);
    }, { setup: initialize });
    benchmarkSuite.add("mul", function () {
      if (!multiplyIsOk) {
        throw new Error();
      }
      return I.multiply(a, b);
    }, { setup: initialize });
    benchmarkSuite.add("mul-jumbo", function () {
      if (!multiplyJumboIsOk) {
        throw new Error();
      }
      return I.multiply(aj, bj);
    }, { setup: initialize });
    benchmarkSuite.add("div", function () {
      if (!divideIsOk) {
        throw new Error();
      }
      return I.divide(as, b);
    }, { setup: initialize });
    benchmarkSuite.add("mod", function () {
      if (!remainderIsOk) {
        throw new Error();
      }
      return I.remainder(as, b);
    }, { setup: initialize });
    benchmarkSuite.add("bitwise-shift-operators", function () {
      var x = I.shiftLeft(a, 1);
      var y = I.shiftRight(b, 1);
      return I.compareTo(x, y) < 0;
    }, { setup: initialize });
    benchmarkSuite.add("bitwise-logical-operators", function () {
      var x = I.and(a, b);
      var y = I.or(a, b);
      var z = I.xor(a, b);
      return I.compareTo(x, y) < 0 && I.compareTo(x, z) < 0;
    }, { setup: initialize });
  }());
  (function () {
    var a = undefined;
    var b = undefined;
    var initialize = function () {
      var a = I.parseInt("134217727", 10);
      var b = I.parseInt("134217729", 10);
      var c = I.multiply(a, b);
      if (I.toString(c, 10) !== "18014398509481983") {
        a = undefined;
        b = undefined;
      }
    };
    benchmarkSuite.add("27*27==54", function () {
      return I.multiply(a, b);
    }, { setup: initialize });
  }());
  (function () {
    var a = undefined;
    var b = undefined;
    var initialize = function () {
      var a = I.parseInt("1023", 10);
      var b = I.parseInt("1025", 10);
      var c = I.multiply(a, b);
      if (I.toString(c, 10) !== "1048575") {
        a = undefined;
        b = undefined;
      }
    };
    benchmarkSuite.add("10*10==20", function () {
      return I.multiply(a, b);
    }, { setup: initialize });
  }());
  benchmarkSuite.add("joseprio", function () {
    //var params = ["1", "100000000", "7070"];
    var params = [
        "1",
        "100000000000000",
        "7071067"
      ];
    var start = Date.now();
    var iterations = 0;
    var ZERO = I.parseInt("0", 10);
    var ONE = I.parseInt("1", 10);
    var TWO = I.parseInt("2", 10);
    var currentPaint = I.parseInt(params[1], 10);
    var currentRadius = I.parseInt(params[0], 10);
    currentRadius = I.add(currentRadius, ONE);
    var numberCircles = 0;
    while (I.compareTo(currentPaint, ZERO) >= 0) {
      numberCircles += 1;
      var t = I.multiply(currentRadius, TWO);
      currentPaint = I.subtract(currentPaint, t);
      currentPaint = I.add(currentPaint, ONE);
      currentRadius = I.add(currentRadius, TWO);
      iterations += 1;
      if (iterations === 1000) {
        if (Date.now() - start > 4000) {
          throw new Error("timeout");
        }
        iterations = 0;
      }
    }
    numberCircles -= 1;
    if (numberCircles !== Number.parseInt(params[2])) {
      throw new Error(numberCircles);
    }
  }, { minSamples: 1 });
  function assertEquals(x, y, t) {
    if (x !== y) {
      throw new RangeError(t + " : " + x + " !== " + y);
    }
  }
  testSuite.add("parseInt", function (I) {
    var s = "";
    var a = undefined;
    var b = undefined;
    for (var i = 2; i < 37 + 1; i += 1) {
      var z = i === 37 ? false : supportsBase(I, i);
      if (!z) {
        if (b != undefined) {
          s += (s === "" ? "" : ",") + (a === b ? a.toString() : a.toString() + "-" + b.toString());
          a = undefined;
          b = undefined;
        }
      } else {
        if (a == undefined) {
          a = i;
        }
        b = i;
      }
    }
    throw new RangeError(s);
  });
  testSuite.add("toString", function (I) {
    var s = "";
    var a = undefined;
    var b = undefined;
    for (var i = 2; i < 37 + 1; i += 1) {
      var z = i === 37 ? false : supportsBaseToString(I, i);
      if (!z) {
        if (b != undefined) {
          s += (s === "" ? "" : ",") + (a === b ? a.toString() : a.toString() + "-" + b.toString());
          a = undefined;
          b = undefined;
        }
      } else {
        if (a == undefined) {
          a = i;
        }
        b = i;
      }
    }
    throw new RangeError(s);
  });
  var testDivide = function () {
    var THREE = I.parseInt("3", 10);
    var MINUS_THREE = I.parseInt("-3", 10);
    var FOUR = I.parseInt("4", 10);
    var MINUS_FOUR = I.parseInt("-4", 10);

    var a = I.divide(FOUR, THREE);
    var b = I.divide(FOUR, MINUS_THREE);
    var c = I.divide(MINUS_FOUR, THREE);
    var d = I.divide(MINUS_FOUR, MINUS_THREE);

    var s = a + ", " + b + ", " + c + ", " + d;
    if (s === "1, -1, -1, 1") {
      return "truncated division";
    }
    if (s === "1, -2, -2, 1") {
      return "floored division";
    }
    if (s === "1, -1, -2, 2") {
      return "Euclidean division";
    }
    return "?";
  };
  var testRemainder = function () {
    var THREE = I.parseInt("3", 10);
    var MINUS_THREE = I.parseInt("-3", 10);
    var FOUR = I.parseInt("4", 10);
    var MINUS_FOUR = I.parseInt("-4", 10);

    var a = I.remainder(FOUR, THREE);
    var b = I.remainder(FOUR, MINUS_THREE);
    var c = I.remainder(MINUS_FOUR, THREE);
    var d = I.remainder(MINUS_FOUR, MINUS_THREE);

    var s = a + ", " + b + ", " + c + ", " + d;
    if (s === "1, 1, -1, -1") {
      return "truncated division";
    }
    if (s === "1, -2, 2, -1") {
      return "floored division";
    }
    if (s === "1, 1, 2, 2") {
      return "Euclidean division";
    }
    return "?";
  };
  var test0 = function (operator) {
    var property = "";
    var f = function (x, y) {
      return 0;
    };
    var f0 = function (x, y) {
      return undefined;
    };
    if (operator === "%") {
      f = function (x, y) {
        return 0 + x % y;
      };
      f0 = function (x, y) {
        return I.remainder(x, y);
      };
    }
    if (operator === "/") {
      f = function (x, y) {
        return 0 + Math.sign(x) * Math.sign(y) * Math.floor(Math.abs(x) / Math.abs(y));
      };
      f0 = function (x, y) {
        return I.divide(x, y);
      };
    }
    if (operator === "&") {
      f = function (x, y) {
        return x & y;
      };
      f0 = function (x, y) {
        return I.and(x, y);
      };
    }
    if (operator === "|") {
      f = function (x, y) {
        return x | y;
      };
      f0 = function (x, y) {
        return I.or(x, y);
      };
    }
    if (operator === "^") {
      f = function (x, y) {
        return x ^ y;
      };
      f0 = function (x, y) {
        return I.xor(x, y);
      };
    }
    var THREE = I.parseInt("3", 10);
    var MINUS_THREE = I.parseInt("-3", 10);
    var FOUR = I.parseInt("4", 10);
    var MINUS_FOUR = I.parseInt("-4", 10);
    
    var f1 = function (a, b) {
      var c = f0(a, b);
      return I.toString(c, 10);
    };
    var a = f1(FOUR, THREE);
    var b = f1(FOUR, MINUS_THREE);
    var c = f1(MINUS_FOUR, THREE);
    var d = f1(MINUS_FOUR, MINUS_THREE);

    var s = a + ", " + b + ", " + c + ", " + d;
    if (operator === "/") {
      if (s === "1, -1, -1, 1") {
        throw new RangeError("truncated division");
      }
      if (s === "1, -2, -2, 1") {
        throw new RangeError("floored division");
      }
      if (s === "1, -1, -2, 2") {
        throw new RangeError("Euclidean division");
      }
    }
    if (operator === "%") {
      if (s === "1, 1, -1, -1") {
        throw new RangeError("truncated division");
      }
      if (s === "1, -2, 2, -1") {
        throw new RangeError("floored division");
      }
      if (s === "1, 1, 2, 2") {
        throw new RangeError("Euclidean division");
      }
    }
    assertEquals(a, f(4, 3).toString(), "4 " + operator + " 3");
    assertEquals(b, f(4, -3).toString(), "4 " + operator + " -3");
    assertEquals(c, f(-4, 3).toString(), "-4 " + operator + " 3");
    assertEquals(d, f(-4, -3).toString(), "-4 " + operator + " -3");
    
    if (operator === "&" || operator === "|" || operator === "^") {
      var fx = function (s1, s2) {
        var a = I.parseInt(s1, 10);
        var b = I.parseInt(s2, 10);
        return f1(a, b);
      };
      var ff = function (a, b) {
        var s1 = a.toString();
        var s2 = b.toString();
        assertEquals(fx(s1, s2).toString(), f(a, b).toString(), "-3 " + operator + " -2");
      };
      ff(4, 1);
      ff(4, -1);
      ff(-4, 1);
      ff(-4, -1);
      ff(3, 1);
      ff(3, -1);
      ff(-3, 1);
      ff(-3, -1);
      ff(4, 2);
      ff(4, -2);
      ff(-4, 2);
      ff(-4, -2);
      ff(3, 2);
      ff(3, -2);
      ff(-3, 2);
      ff(-3, -2);
    }
  };
  testSuite.add("%", function (I) {
    test0("%");
  });
  testSuite.add("/", function (I) {
    test0("/");
  });
  testSuite.add("&", function (I) {
    test0("&");
  });
  testSuite.add("|", function (I) {
    test0("|");
  });
  testSuite.add("^", function (I) {
    test0("^");
  });
  testSuite.add("~", function (I) {
    var x = I.parseInt("3", 10);
    var tmp1 = I.not(x);
    var s = I.toString(tmp1, 10);
    assertEquals(s, (~3).toString(), "~3");
    var x = I.parseInt("-3", 10);
    var tmp1 = I.not(x);
    var s = I.toString(tmp1, 10);
    assertEquals(s, (~-3).toString(), "~-3");
  });
  testSuite.add("<<", function (I) {
    var a = I.parseInt("3", 10);
    var b = I.shiftLeft(a, 8);
    var s = I.toString(b, 10);
    assertEquals(s, (3 << 8).toString(), "3 << 8");
    var a = I.parseInt("-3", 10);
    var b = I.shiftLeft(a, 8);
    var s = I.toString(b, 10);
    assertEquals(s, (-3 << 8).toString(), "-3 << 8");
  });
  testSuite.add(">>", function (I) {
    var a = I.parseInt("3", 10);
    var b = I.shiftRight(a, 8);
    var s = I.toString(b, 10);
    assertEquals(s, (3 >> 8).toString(), "-3 >> 8");
    var a = I.parseInt("-3", 10);
    var b = I.shiftRight(a, 8);
    var s = I.toString(b, 10);
    assertEquals(s, (-3 >> 8).toString(), "-3 >> 8");
  });
  testSuite.add("<< -n", function (I) {
    var a = I.parseInt("3", 10);
    var b = I.shiftLeft(a, -1);
    var s = I.toString(b, 10);
    assertEquals(s, "1", "3 << -1");  // OR Throw an error (?)
  });
  testSuite.add(">> -n", function (I) {
    var a = I.parseInt("3", 10);
    var b = I.shiftRight(a, -1);
    var s = I.toString(b, 10);
    assertEquals(s, "6", "3 >> -1");  // OR Throw an error (?)
  });
  testSuite.add("<< 32", function (I) {
    var a = I.parseInt("3", 10);
    var b = I.shiftLeft(a, 32);
    var s = I.toString(b, 10);
    assertEquals(s, "12884901888", "3 << 32");  // OR Throw an error (?)
  });
  testSuite.add(">> 32", function (I) {
    var a = I.parseInt("12884901888", 10);
    var b = I.shiftRight(a, 32);
    var s = I.toString(b, 10);
    assertEquals(s, "3", "12884901888 >> 32");  // OR Throw an error (?)
  });
  testSuite.add("-1024 >> 9007199254740991", function (I) {
    var a = I.parseInt("-1024", 10);
    var b = I.shiftRight(a, 9007199254740991);
    var s = I.toString(b, 10);
    assertEquals(s, "-1");
  });
  //testSuite.add("1024 >> 9007199254740991", function (I) {
  //  var a = I.parseInt("1024", 10);
  //  var b = I.shiftRight(a, 9007199254740991);
  //  var s = I.toString(b, 10);
  //  assertEquals(s, "0");
  //});
  //testSuite.add("0 << 9007199254740991", function (I) {
  //  var a = I.parseInt("0", 10);
  //  var b = I.shiftLeft(a, 9007199254740991);
  //  var s = I.toString(b, 10);
  //  assertEquals(s, "0");
  //});
  testSuite.add("bitLength", function (I) {
    // ceil(log2(this < 0 ? 0 - this : this + 1))
    var a = I.parseInt("4294967295", 10);
    var b = I.bitLength(a);
      console.log(b, typeof b);
    var s = typeof b === "number" ? b.toString(10) : "-"; // I.toString(b, 10);
    assertEquals(s, "32", "bitLength(4294967295)");
    for (var i = 0; i < 4; i += 1) {
      var tmp0 = i.toString();
      var tmp1 = I.parseInt(tmp0, 10);
      var tmp2 = I.bitLength(tmp1);
      var s = typeof tmp2 === "number" ? tmp2.toString(10) : "-";//I.toString(tmp2, 10);
      assertEquals(s, (i === 0 ? 0 : 1 + Math.floor(Math.log(i + 0.5) * Math.LOG2E)).toString(), "bitLength(" + i.toString() + ")");
    }
  });
  var testPow = function (sa, sb) {
    var ssa = sa.toString();
    var a = I.parseInt(ssa, 10);
    var b = null;
    try {
      b = I.pow(a, sb);
    } catch (error) {
      if (sb < 0) {
        console.log(error);
      } else {
        throw error;
      }
    }
    var c = b == null ? null : I.toString(b, 10);
    assertEquals(c, sb < 0 ? null : Math.pow(sa, sb).toString(), sa + " ** " + sb);
  };
  testSuite.add("x ** y", function (I) {
    for (var a = +2; a >= -2; a -= 1) {
      for (var b = +2; b >= -2; b -= 1) {
        testPow(a, b);
      }
    }
  });
  // jsbn's bug
  testSuite.add("0 ** (0xffffffff + 1)", function (I) {
    testPow(0, 0xffffffff + 1);
  });

  testSuite.add("fromNumber", function (I) {
    var i = I.fromNumber(42);
    var s = I.toString(i, 10);
    assertEquals(s, "42");
    var i = I.fromNumber(9007199254740991);
    var s = I.toString(i, 10);
    assertEquals(s, "9007199254740991");
  });

  testSuite.add("fromNumber-big", function (I) {
    var i = I.fromNumber(Number.MAX_VALUE);
    var s = I.toString(i, 10);
    assertEquals(s, "179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368");
  });

  testSuite.add("toNumber", function (I) {
    var i = I.parseInt("42", 10);
    var s = I.toNumber(i);
    assertEquals(s, 42);
    var i = I.parseInt("9007199254740991", 10);
    var s = I.toNumber(i);
    assertEquals(s, 9007199254740991);
  });

  testSuite.add("toNumber-big", function (I) {
    var i = I.parseInt("100000000000000008192", 10);
    var s = I.toNumber(i);
    assertEquals(s, 100000000000000000000);
    var i = I.parseInt("100000000000000008193", 10);
    var s = I.toNumber(i);
    assertEquals(s, 100000000000000016384);

    // 2**106+(2**53+4)
    var i = I.parseInt("81129638414606690702988259885060", 10);
    var s = I.toNumber(i);
    assertEquals(s, 9007199254740994 * 9007199254740992);
  });

  testSuite.add("mod", function (I) {
    var testMod = function (I) {
      var THREE = I.parseInt("3", 10);
      var MINUS_THREE = I.parseInt("-3", 10);
      var FOUR = I.parseInt("4", 10);
      var MINUS_FOUR = I.parseInt("-4", 10);

      var a = I.mod(FOUR, THREE);
      var c = I.mod(MINUS_FOUR, THREE);
      var as = I.toString(a, 10)
      var cs = I.toString(c, 10);
      assertEquals(as, "1");
      assertEquals(cs, "2");
      //try {
      //  var t = I.mod(FOUR, MINUS_THREE);
      //  assertEquals(false, true);
      //} catch (error) {
      //}
      //try {
      //  var t = I.mod(MINUS_FOUR, MINUS_THREE);
      //  assertEquals(false, true);
      //} catch (error) {
      //}
    };
    testMod(I);
  });
  testSuite.add("modInverse", function (I) {
    var a = I.parseInt("7", 10);
    var b = I.parseInt("20", 10);
    var x = I.modInverse(a, b);
    var s = I.toString(x, 10);
    assertEquals(s, "3");
  });
  testSuite.add("modPow", function (I) {
    var a = I.parseInt("10", 10);
    var b = I.parseInt("3", 10);
    var c = I.parseInt("30", 10);
    var x = I.modPow(a, b, c);
    var s = I.toString(x, 10);
    assertEquals(s, "10");
  });
  /*
  testSuite.add("modPow", function (I) {
    var t = Date.now();
    var a = "-29694681763448712115267303514023904033265211886910761264672576231554464098637402550663040547342726600568933793424522580102024307390684120501123145913181335140054630257537266316462992944143291789428368597319366497044735307450905133722212599357295495795914532499656994934020209866067682479620381834108247731805362251476372300643310863145482504070318221407436590709353870667746678473405580031604287313646969125892734476605404502107124001169091069970155161376239893444309019800637825991490992886756114995636568690097893351815480034167383046629554600914654853770556603406920385489591581795592966209762321826324786588707444458373503608685515834491712886834370824573830770838543360344886700981870";
    //  var b = "119334647663227291363113405741243413916434827363146166012200067038894142816254113710841716638008805209543910927476491099816542561560345503311330152550056221240122563520612198703057065667637570340647063422988042473190059156975005813463818646696643573820202000369152615667401021816298491297653620614440782978764393137821956464627163145421579373439868081673415678986432326806001408975760610901250649711198896213496068605039486228645916762983047459546900860937537474723612261449751343757826252579432285178556676653805951590208797794400875516522254480074885052650095801006651270614765243081674516367874973021395155320563";
    var b = "11933464766322729136311340574124341391643482736314616601220006703889414281625411371084171663";
    var c = "21766174458617435773191008891802753781907668374255538511144643224689886235383840957210909013086056401571399717235807266581649606472148410291413364152197364477180887395655483738115072677402235101762521901569820740293149529620419333266262073471054548368736039519702486226506248861060256971802984953561121442680157668000761429988222457090413873973970171927093992114751765168063614761119615476233422096442783117971236371647333871414335895773474667308967050807005509320424799678417036867928316761272274230314067548291133582479583061439577559347101961771406173684378522703483495337037655006751328447510550299250924469288819";
    //var e = "72324557783415787424155521118202596834933898242395886137674358852236580794269836377307287786755289962440782013831739423702014967616850758313183751932896777891669089456853771795527757996329325050996269324970201536028633484579111946278204478269805106124073503820660024439715627250378312057531479971103107712537148991421528677788413535635435770715226291273808528964474082509191820953587881465428407150420995055514194080761192776104785866884604229750694117199160680355057545631740521663782384430018469927006099212868328005800482010975321397684122860835203872900466151550540270815104453823592754896203799696226528729895";
    var e = "13540802089857741167023542037988805222546440577229559332533075840910935632532209556364267054685794323888640528195606483456493117658256579047999363349321383330093264011066537310121911518868496867167891598543722545495853065340968093012365382813267366017727691685093503665250431900627681102142398694435798038224365707752325308958087778218641883318154142118828465677276422817258682513984877559101140482783383241463776862894614490093886509444848747212475405025421083989216107083936711753381670137437841278736875577642823331640840588001717269730039276342775573437428364758255438364398063059345080931231137408921321659897500";
    var tmp0 = I.parseInt(a, 10);
    var tmp1 = I.parseInt(b, 10);
    var tmp2 = I.parseInt(c, 10);
    var x = I.modPow(tmp0, tmp1, tmp2);
    var s = I.toString(x, 10);
    t = Date.now() - t;
    console.log(t, url);
    assertEquals(s, e, "modPow");
  });
  */
  //!!!

  (function () {
    var basicTests = [
        "-1000000000000000000000000000000000001+1000000000000000000000000000000000000=-1",
        "100000000000000000002222222222222222222-100000000000000000001111111111111111111=1111111111111111111",
        "16**13==4503599627370496",
        "123456789123456789**10==822526267372365207989468699031914332476569003445489153619518989325083908083922133639704420166045905346960117046949453426283086050487204639652635846010822673782217799736601",
        "2**63=9223372036854775808",
        "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000=306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000",
        "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000=0x9822997e35bb99bcf103a64299aa92b8446ab93879fba53349f1626f3c8f78a4ee1d8d9e7562538f8e374fdf64c8eff7481c63cde5ca9821abfb3df6fb3e2489d2f85d34cf347f3e89191a19cc6b6b8072a976a8f1bcf68d20f18a1c0efb023252ba2d0961428a5c282d2645f3f7fa160f7f84aca88e40a74066c4a787bed7d0082f7e45b1ffee532715f56bd5f8168eaf7eaae112ed1316371f047692631e70e6b85b290ef063845b364dad7e10b9deb9fcfb708f83b7c3c6b82ce16eb0034c030b332a58d637a7b547fd0527051d7de9e5004db2ea2bd75f5c5a280a1a9b93c3c83373b6dcf1b65c01197096e97d13076b6613bc2ebf47c91fbe1aefeea966134bfbbf5f850320f0f0c2d88888bd82d118a6aaf8df2b092cf5456eff7e209feb476bf3c01d6d2e7ca0b9f40d83b107b4def92f2927cf0a1bb6190c67a4da91478709262ed1f1ecb77fbaf1197ac238c246a63a697f51e8d539f850e790137e7fce5f764896fdfb4fc3787520608f0400e72aeea5737c36304c6887ec1a174564ecec63a57b1e0946dc311dd3aea7bfae197ff9c7fcbf17c97d9db303d231702ef502dde1b53896196dc2e5d30b2b6ec58fc3744f4de08109eb99aa9f22ffe2f12f3953f516f91d35a8852aff4a19e250410fbd8dbcdae99f92f88e2f94341fc1ecdff32733d194c0541f708a72c5b4c03e5515e1086d0903addca0e172968ff1dee87bbd4fee679e2ee5a52975807ae7212cc2a33e0821e2d9b44eaa7dc29536a94c6597eda41bdd1e5e618e7b388b53d38ef9542523bce888738db46c6706c3ee82cbc3655408071e9e422a44d309e3cfd31ec2135ee0cba32b0c6721c8bee4d076543b71c35a06087a007c14e51d1f0c4d0aa9aa0751dfd3776d2357a010e6b147aca40c7b669291e6defbf5ca77505c960f14b330e6c90dc2539431329ef78a1e9f26b2ead7d28a622e6b586bcee22bd0a495442c6a1235588988252cbd4d36975560fb8e7e5c8cf06f29aeb68659c5cb4cf8d011375b00000000000000000000000000000000000000000000000000000000000000000000000000",
        "9223372036854775808=0b1000000000000000000000000000000000000000000000000000000000000000",
        "-1=-1",
        "-10000000000000000=-10000000000000000",
        "0x324AFCCC342342333CCD239998881232324AFCCC342342333CCD239998881232=22748133857356174891035811692236022265357659892433333914058690475216129757746",
        "234345345345=234345345345",
        "234345345345=0x3690123141",
        "1230000000=1230000000",
        "-0x10=-16",
        "-0=0",
        "-0000000000000000000000123=-123",
        "1+0=1",
        "10+10000000000000000=10000000000000010",
        "10000000000000000+10=10000000000000010",
        "10000000000000000+10000000000000000=20000000000000000",
        "0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111+0b1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111=0b11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110",
        "10+10=20",
        "-10000000000000000+0=-10000000000000000",
        "0+10000000000000000=10000000000000000",
        "1+0b11111111111111111111111111=67108864",
        "10-10000000000000000=-9999999999999990",
        "10000000000000000-10=9999999999999990",
        "10000000000000000-10000000000000000=0",
        "10-10=0",
        "-10000000000000000-0=-10000000000000000",
        "0-10000000000000000=-10000000000000000",
        "-1-0b11111111111111111111111111=-67108864",
        "10*10000000000000000=100000000000000000",
        "10000000000000000*10=100000000000000000",
        "10000000000000000*10000000000000000=100000000000000000000000000000000",
        "10*10=100",
        "100000000000000000*-1=-100000000000000000",
        "-1*100000000000000000=-100000000000000000",
        "0*-100000000000000000=0",
        "-100000000000000000*0=0",
        "0*-1=0",
        "10/10000000000000000=0",
        "10000000000000000/10=1000000000000000",
        "10000000000000000/10000000000000000=1",
        "10/10=1",
        "-10/10=-1",
        "10/-10=-1",
        "-10/-10=1",
        "-3221225473/3=-1073741824",
        "-3221225472/2=-1610612736",
        "00000000000000000000000000000000000000/2=0",
        "0/-10000000000000000=0",
        "10000000000000000/-1000000000000000000000000000000000000000000000000=0",
        "727587048255308587128283949527991017146474/3262705074329558374374751=223001169790014763",
        "194994622673976706651658530346880329671441/985341126327582219965=197895548520066180152",
        "10/10=1",
        "6582018229284824168619876730229320890292528855852623664389292032/730750818665451459101842416358132502628711530497=9007199254740991",
        "10%10000000000000000=10",
        "10000000000000000%10=0",
        "10000000000000000%10000000000000000=0",
        "10%10=0",
        "0%-10000000000000000=0",
        "-3%3=0",
        "10<=>10000000000000000=-1",
        "10000000000000000<=>10=1",
        "10000000000000000<=>10000000000000000=0",
        "10<=>10=0",
        "1<=>2=-1",
        "2<=>1=1",
        "0<=>10000000000000000=-1",
        "10000000000000000<=>0=1",
        "9007199254740991+1=9007199254740992",
        "-9007199254740991-1=-9007199254740992",
        "-5325786+0=-5325786",
        "5325786+0=5325786",
        "-10/-1=10",
        "-10/1=-10",
        "-10*-1=10",
        "-10*1=-10",
        "-1*-10=10",
        "1*-10=-10",
        "9-10=-1",
        "-9+10=1",
        "9720461847429978160121544487215098400/252477884013826224964152=38500250766113",
        "-9574957903731725597006190931748628130509/38500250766113=-248698585416990960511658890",
        "0<=>-1=1",
        "-1<=>-1=0",
        "0<=>0=0",
        "1<=>1=0",
        "1<=>-1=1",
        "7%4=3",
        "-1*-1=1",
        "-1*0=0",
        "6*5=30",
        "3532344566*49823554654=175993962540860910164",
        "306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000*306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000306057512216440636035370461297268629388588804173576999416776741259476533176716867465515291422477573349939147888701726368864263907759003154226842927906974559841225476930271954604008012215776252176854255965356903506788725264321896264299365204576448830388909753943489625436053225980776521270822437639449120128678675368305712293681943649956460498166450227716500185176546469340112226034729724066333258583506870150169794168850353752137554910289126407157154830282284937952636580145235233156936482233436799254594095276820608062232812387383880817049600000000000000000000000000000000000000000000000000000000000000000000000000=93671200784116709168212603693264364491482625140650867012458907580850290479914858264565537535310631693272766559003934292711906009200684627249517173304448324734928094279109540960988005032678411543160632864773462725296609470788914777324208956654901916718052447794025580721872592906456183913463092191741342070445684239516003619737023925365750418514776445402451077204908500545814231399834008986998489607202994429669705269992974675929240962547032808582647838847126057197173872616052439789970160446312025948012277132907416345489644872455137593054745212854458919536502094918842320643368201359463330136605206022340820844860783320865546136566072749156961102456117415146305779819245975135392214778387549605996353627520849328240846135361548408069158100232642516618512258711646524053695093681984213935153010000089399908749062684640944173803129898417404797961177294631508660424692823609149766102132719268107342261493147254317799773900921401553815299967676469915320518174445065337121677714632518336731258782009414814334567511810621472393747064687526968680665458697226848388002476327915592106057333872616052439789970160446312025948012277132907416345489644872455137593054745212854458919536502094918842320643368201359463330136605206022340820844860689649664762019856904536553267838091625932521165128952233516227811364487907634747731788089985538696547573368802544473776446194223441831991262741538342075728960165587705104394192021995056721497205902051776170711077833288946615883183853085674853758507974771161355740521410846675200886077579684162126058431830475717314299296347939445989954767755930288891719226637427609836185444550609580805347569022203418477964077359417533994004736217734679815579419828489068466048860160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        "11000000000/-11=-1000000000",
        "0/-1=0",
        "-2/-1=2",
        "-2%-1=0",
        "175993962540860910164/49823554654=3532344566",
        "49823554654/34566=1441403",
        "1234+1235=2469",
        "-5%-3=-2",
        "100000000000000000000*2=200000000000000000000",
        "100000000000000000000*0=0",
        "100000000000000000000/1000000000000000000000=0",
        "0b11111111111111111111111111=0b11111111111111111111111111",
        "1000%10=0",
        "-0=0",
        "30!=265252859812191058636308480000000",
        "-2147483649=-0x80000001",
        "10000000010000000-10000000=10000000000000000",
        "12345678901234567890123456789012345678901234567890123456789012345678901234567890/1234567890=10000000001000000000100000000010000000001000000000100000000010000000001",

        // an error if not zero-fill a result array in the division
        "(0x1000000000000000000000000*0x1000000000000000000000000)/0x1000000000000000000000000=0x1000000000000000000000000",

        // https://github.com/GoogleChromeLabs/jsbi/issues/13
        "2788589391528142331873770897124985830679715361908029740727468171087321981075%170141183460469231731687303715884105727=170141183460469231731687303715884105726",

        // https://github.com/GoogleChromeLabs/jsbi/issues/44
        "0b10000010001000100010001000100010001000100010001000100010001000100&(~0b10000000000000000000000000000000000000000000000000000000000000000)=0b10001000100010001000100010001000100010001000100010001000100",
        "0|(-18446744073709551615)=-18446744073709551615",
        "0^(-18446744073709551615)=-18446744073709551615"
      ];
    var run = function (input) {
      //if (testDivide() !== "truncated division" && input.indexOf("/") !== -1) {
      //  console.log("TODO:testDivide");
      //  return;
      //}
      //if (testRemainder() !== "truncated division" && input.indexOf("%") !== -1) {
      //  console.log("TODO:testRemainder");
      //  return;
      //}
      if (input.indexOf("0x") !== -1 && !supportsBase(I, 16)) {
        return;
      }
      if (input.indexOf("0b") !== -1 && !supportsBase(I, 2)) {
        return;
      }
      var ZERO = I.parseInt("0", 10);
      var ONE = I.parseInt("1", 10);
      var divideType = testDivide();
      var divideInternal = function (a, b) {
        var q = I.divide(a, b);
        if (divideType === "truncated division") {
          return q;
        }
        if (divideType === "floored division") {
          var p = I.multiply(q, b);
          if (I.compareTo(a, ZERO) * I.compareTo(b, ZERO) < 0 && I.compareTo(p, a) !== 0) {
            q = I.add(q, ONE);
          }
          return q;
        }
        if (divideType === "Euclidean division") {
          var p = I.multiply(q, b);
          if (I.compareTo(a, ZERO) < 0 && I.compareTo(p, a) !== 0) {
            q = I.compareTo(b, ZERO) < 0 ? I.subtract(q, ONE) : I.add(q, ONE);
          }
          return q;
        }
        throw new RangeError(divideType);
      };
      var remainderType = testRemainder();
      var remainderInternal = function (a, b) {
        var r = I.remainder(a, b);
        if (remainderType === "truncated division") {
          return r;
        }
        if (remainderType === "floored division") {
          if (I.compareTo(a, ZERO) * I.compareTo(b, ZERO) < 0 && I.compareTo(r, ZERO) !== 0) {
            r = I.subtract(r, b);
          }
          return r;
        }
        if (remainderType === "Euclidean division") {
          if (I.compareTo(a, ZERO) < 0 && I.compareTo(r, ZERO) !== 0) {
            r = I.compareTo(b, ZERO) < 0 ? I.add(r, b) : I.subtract(r, b);
          }
          return r;
        }
        throw new RangeError(remainderType);
      };
      var integerRegExp = /^(0b|0x)?([0-9a-fA-F]+)/;
      var operatorRegExp = /^(?:\*\*|[\+\-\*\/%]|<\=>|\!|[&^|])/;
      var pow = function (x, count, accumulator) {
        if (count < 0) {
          throw new RangeError();
        }
        return count < 1 ? accumulator : Math.floor(count / 2) * 2 !== count ? pow(x, count - 1, I.multiply(accumulator, x)) : pow(I.multiply(x, x), Math.floor(count / 2), accumulator);
      };
      var factorial = function (n) {
        var result = I.parseInt("1", 10);
        var i = 0;
        while (++i <= n) {
          var tmp0 = i.toString(10);
          var tmp1 = I.parseInt(tmp0, 10);
          result = I.multiply(result, tmp1);
        }
        return result;
      };
      var evaluate = function (input, position, p) {
        var result = undefined;
        var ok = true;
        while (position < input.length && ok) {
          if (result != undefined && input.slice(position, position + 1) === ")") {
            return [
              position,
              result
            ];
          }
          if (result == undefined && input.slice(position, position + 1) === "(") {
            var tmp = evaluate(input, position + 1, 0);
            position = tmp[0];
            result = tmp[1];
            if (input.slice(position, position + 1) === ")") {
              position += 1;
            }
          } else {
            var match = integerRegExp.exec(input.slice(position));
            if (match != undefined) {
              position += match[0].length;
              var i = I.parseInt(match[2], match[1] === "0b" ? 2 : match[1] === "0x" ? 16 : 10);
              if (result == undefined) {
                result = i;
              } else {
                result = I.multiply(result, i);
              }
            } else if (result != undefined) {
              match = operatorRegExp.exec(input.slice(position));
              if (match != undefined) {
                var tmp = undefined;
                if (match[0] === "+" && p < 2) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 2);
                  position = tmp[0];
                  result = I.add(result, tmp[1]);
                } else if (match[0] === "-" && p < 2) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 2);
                  position = tmp[0];
                  result = I.subtract(result, tmp[1]);
                } else if (match[0] === "*" && p < 3) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 3);
                  position = tmp[0];
                  result = I.multiply(result, tmp[1]);
                } else if (match[0] === "/" && p < 3) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 3);
                  position = tmp[0];
                  result = divideInternal(result, tmp[1]);
                } else if (match[0] === "%" && p < 3) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 3);
                  position = tmp[0];
                  result = remainderInternal(result, tmp[1]);
                } else if (match[0] === "<=>" && p < 1) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 1);
                  position = tmp[0];
                  result = I.compareTo(result, tmp[1]);
                } else if (match[0] === "**" && p < 3) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 3);
                  position = tmp[0];
                  result = pow(result, Number.parseInt(I.toString(tmp[1], 10)), I.parseInt("1", 10));
                } else if (match[0] === "!") {
                  position += match[0].length;
                  result = factorial(Number.parseInt(I.toString(result, 10), 10));
                } else if (match[0] === "&" && p < 1.3) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 1.3);
                  position = tmp[0];
                  result = I.and(result, tmp[1]);
                } else if (match[0] === "^" && p < 1.2) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 1.2);
                  position = tmp[0];
                  result = I.xor(result, tmp[1]);
                } else if (match[0] === "|" && p < 1.1) {
                  position += match[0].length;
                  tmp = evaluate(input, position, 1.1);
                  position = tmp[0];
                  result = I.or(result, tmp[1]);
                } else {
                  ok = false;
                }
              } else {
                ok = false;
              }
            } else if (result == undefined) {
              match = /^[\-~]/.exec(input.slice(position));
              if (match != undefined && match[0] === "-") {
                position += match[0].length;
                var tmp = evaluate(input, position, 3);
                position = tmp[0];
                var MINUS_ONE = I.parseInt("-1", 10);
                result = I.multiply(MINUS_ONE, tmp[1]);
              } else if (match != undefined && match[0] === "~") {
                position += match[0].length;
                var tmp = evaluate(input, position, 3);
                position = tmp[0];
                result = I.not(tmp[1]);
              } else {
                ok = false;
              }
            } else {
              ok = false;
            }
          }
        }
        return [
          position,
          result
        ];
      };
      var t = input.split("=");
      var right = t.slice(-1).join("=");
      var radix = 10;
      var prefix = "";
      if (right.slice(0, 2) === "0b" || right.slice(0, 3) === "-0b") {
        radix = 2;
        prefix = "0b";
      }
      if (right.slice(0, 2) === "0x" || right.slice(0, 3) === "-0x") {
        radix = 16;
        prefix = "0x";
      }
      var result = evaluate(t.slice(0, -1).join("="), 0, 0)[1];
      if (input.indexOf("<=>") === -1) {
        var left = I.toString(result, radix).replace(/^(\-)?/, "$1" + prefix);
        assertEquals(left.toLowerCase(), right.toLowerCase(), input);  //!toLowerCase
      } else {
        assertEquals(Math.sign(result).toString(), Math.sign(Number(right)).toString(), input);  //assertEquals((1 / result).toString(), (1 / Number(right)).toString(), input);
      }
    };
    var i = -1;
    var allTests = generatedTests.concat(basicTests);
    while (++i < allTests.length) {
      var input = allTests[i];
      if (input !== "?") {
        testSuite.add(input, run.bind(undefined, input));
      }
    }
  }());
  testSuite.add("negate", function () {
    var a = I.parseInt("0", 10);
    var b = I.negate(a);
    var c = I.compareTo(a, b);
    assertEquals(c, 0, "0<=>-0");
  });
  testSuite.add("2", function () {
    for (var d = 2; d < 10 + 8; d += 8) {
      for (var c = 1; c < Math.pow(2, 53); c *= d) {
        var tmp0 = c.toString();
        var base = I.parseInt(tmp0, 10);
        var one = I.parseInt("1", 10);
        var tmp1 = I.subtract(base, one);
        var tmp2 = I.multiply(tmp1, base);
        var tmp3 = I.add(tmp2, tmp1);
        var tmp4 = I.multiply(tmp3, base);
        var a = I.multiply(tmp4, base);
        var b = I.add(tmp4, one);

        var tmp6 = I.divide(a, b);
        assertEquals(I.toString(tmp6, 10), (c - 1).toString(), "?");
      }
    }
  });
};


// TODO: https://github.com/peterolson/BigInteger.js/issues/88
